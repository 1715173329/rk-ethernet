diff --git a/drivers/net/ethernet/rockchip/gmac/stmmac_main.c b/drivers/net/ethernet/rockchip/gmac/stmmac_main.c
index 5eeaf9d..5e2afe1 100755
--- a/drivers/net/ethernet/rockchip/gmac/stmmac_main.c
+++ b/drivers/net/ethernet/rockchip/gmac/stmmac_main.c
@@ -53,6 +53,11 @@
 #include "stmmac.h"
 #include "../eth_mac.h"
 
+#define RTL_8201F_PHY_ID  0x001cc816
+#define RTL_8211E_PHY_ID  0x001cc915
+#define DP_83848_PHY_ID   0x20005c90
+#define RTL_8211F_PHY_ID  0x001cc916
+
 #undef STMMAC_DEBUG
 /*#define STMMAC_DEBUG*/
 #ifdef STMMAC_DEBUG
@@ -2960,6 +2965,132 @@ static int stmmac_hw_init(struct stmmac_priv *priv)
 	return 0;
 }
 
+/*static int phy_dp83848_led_link(struct phy_device *phydev, int link)
+{
+        int value;
+
+        if (phydev->phy_id != DP_83848_PHY_ID)
+                return 0;
+
+        printk("%s in\n", __func__);
+
+	value = phy_read(phydev, 0x18);
+	if (link) {
+		value |= (1<<2);
+		phy_write(phydev, 0x18, value);
+	} else {
+		value &= ~(1<<2);
+                phy_write(phydev, 0x18, value);
+	}
+	return 0;
+}*/
+
+static int phy_dp83848_led_fixup(struct phy_device *phydev)
+{
+        int value;
+
+	if (phydev->phy_id != DP_83848_PHY_ID)
+		return 0;
+
+        printk("%s in\n", __func__);
+
+	value = phy_read(phydev, 0x18);
+	value &= ~(1<<2);
+	phy_write(phydev, 0x18, value);
+
+	value = phy_read(phydev, 0x19);
+	value &= ~(1<<5);
+	phy_write(phydev, 0x19, value);
+
+	return 0;
+}
+
+static int phy_rtl8201f_led_fixup(struct phy_device *phydev)
+{
+	int value;
+
+	printk("%s in\n", __func__);
+
+	/* switch to page 7 */
+	value = phy_read(phydev, 31);
+	value &= 0xff00;
+	value |= 0x0007;
+	value = phy_write(phydev, 31, value);
+
+	/* set customized led enable */
+	value = phy_read(phydev, 19);
+	value |= 0x1<<3;
+	phy_write(phydev, 19, value);
+
+	value &= 0x0000;
+	/* set led0 link */
+	value |= ( (7<0));
+	//value |= ( (7<4));
+	//value |= ( (7<8));
+
+	/* led1 act */
+	//value |= ( (1<3));
+	value |= ( (1<7));
+	//value |= ( (1<11));
+	phy_write(phydev, 17, value);
+
+	/* back to page 0 */
+	value = phy_read(phydev, 31);
+	value &= 0x0000;
+	value = phy_write(phydev, 31, value);
+
+	return 0;
+}
+
+static int phy_rtl8211e_led_fixup(struct phy_device *phydev)
+{
+	int val;
+
+	printk("%s in\n", __func__);
+
+	/*switch to extension page44*/
+	phy_write(phydev, 31, 0x07);
+	phy_write(phydev, 30, 0x2c);
+
+	/*set led1(yellow) act*/
+	val = phy_read(phydev, 26);
+	val &= (~(1<4));// bit4=0
+	val |= ( (1<5));// bit5=1
+	val &= (~(1<6));// bit6=0
+	phy_write(phydev, 26, val);
+
+	/*set led0(green) link*/
+	val = phy_read(phydev, 28);
+	val |= ( (7<0));// bit0,1,2=1
+	val &= (~(7<4));// bit4,5,6=0
+	val &= (~(7<8));// bit8,9,10=0
+	phy_write(phydev, 28, val);
+
+	/*switch back to page0*/
+	phy_write(phydev,31,0x00);
+
+	return 0;
+}
+
+static int phy_rtl8211f_led_fixup(struct phy_device *phydev)
+{
+ 
+	int val;
+
+	printk("%s in\n", __func__);
+
+	/*switch to extension page44*/
+	phy_write(phydev, 31, 0x0d04);
+
+	val = 0x617b;
+	phy_write(phydev, 16, val);
+
+	/*switch back to page0*/
+	phy_write(phydev, 31, 0x0000);
+
+	return 0;
+}
+
 /**
  * stmmac_dvr_probe
  * @device: device pointer
@@ -3078,6 +3209,21 @@ struct stmmac_priv *stmmac_dvr_probe(struct device *device,
 		}
 	}
 #endif
+
+	/* register the PHY board fixup */
+	ret = phy_register_fixup_for_uid(RTL_8211E_PHY_ID, 0xffffffff, phy_rtl8211e_led_fixup);
+	if (ret)
+		pr_warn("Cannot register PHY board fixup.\n");
+	ret = phy_register_fixup_for_uid(RTL_8201F_PHY_ID, 0xffffffff, phy_rtl8201f_led_fixup);
+	if (ret)
+		pr_warn("Cannot register PHY board fixup.\n");
+	ret = phy_register_fixup_for_uid(DP_83848_PHY_ID, 0xffffffff, phy_dp83848_led_fixup);
+	if (ret)
+		pr_warn("Cannot register PHY board fixup.\n");
+        ret = phy_register_fixup_for_uid(RTL_8211F_PHY_ID, 0xffffffff, phy_rtl8211f_led_fixup);
+        if (ret)
+                pr_warn("Cannot register PHY board fixup.\n");
+
 	return priv;
 #if 0
 error_mdio_register:
